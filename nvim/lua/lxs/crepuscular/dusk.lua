local lush = require('lush')

package.loaded['lxs.crepuscular.colours'] = nil
-- package.loaded['lxs.crepuscular.base'] = nil

local colours = require('lxs.crepuscular.colours')
-- local base = require('lxs.crepuscular.base')

local bright = colours.dark.bright
local dim = colours.dark.dim
local standard = colours.dark.standard

local theme = lush(function()
	return {
		Bold({ gui = 'nocombine,bold' }),
		BoldItalic({ gui = 'nocombine,bold,italic' }),
		BoldUnderline({ gui = 'nocombine,bold,underline' }),
		BoldUndercurl({ gui = 'nocombine,bold,undercurl' }),
		BoldItalicUndercurl({ gui = 'nocombine,bold,italic,undercurl' }),
		BoldItalicUnderline({ gui = 'nocombine,bold,italic,underline' }),
		BoldReverse({ gui = 'nocombine,bold,reverse' }),
		Italic({ gui = 'nocombine,italic' }),
		ItalicUndercurl({ gui = 'nocombine,italic,undercurl' }),
		ItalicUnderline({ gui = 'nocombine,italic,underline' }),
		NoCombine({ gui = 'nocombine' }),
		Reverse({ gui = 'nocombine,reverse' }),
		StrikeThrough({ gui = 'nocombine,strikethrough' }),
		Underline({ gui = 'nocombine,underline' }),
		Undercurl({ gui = 'nocombine,undercurl' }),

		Black({ fg = standard.black }),
		BlackBG({ bg = standard.black }),
		BlackSpecial({ sp = standard.black }),

		Blue({ fg = standard.blue }),
		BlueBG({ bg = standard.blue }),
		BlueSpecial({ sp = standard.blue }),

		Cyan({ fg = standard.cyan }),
		CyanBG({ bg = standard.cyan }),
		CyanSpecial({ sp = standard.cyan }),

		Green({ fg = standard.green }),
		GreenBG({ bg = standard.green }),
		GreenSpecial({ sp = standard.green }),

		Grey({ fg = standard.grey }),
		GreyBG({ bg = standard.grey }),
		GreySpecial({ sp = standard.grey }),

		Orange({ fg = standard.orange }),
		OrangeBG({ bg = standard.orange }),
		OrangeSpecial({ sp = standard.orange }),

		Purple({ fg = standard.purple }),
		PurpleBG({ bg = standard.purple }),
		PurpleSpecial({ sp = standard.purple }),

		Red({ fg = standard.red }),
		RedBG({ bg = standard.red }),
		RedSpecial({ sp = standard.red }),

		White({ fg = standard.white }),
		WhiteBG({ bg = standard.white }),
		WhiteSpecial({ sp = standard.white }),

		Yellow({ fg = standard.yellow }),
		YellowBG({ bg = standard.yellow }),
		YellowSpecial({ sp = standard.yellow }),

		BrightBlack({ fg = bright.black }),
		BrightBlackBG({ bg = bright.black }),
		BrightBlackSpecial({ sp = bright.black }),

		BrightBlue({ fg = bright.blue }),
		BrightBlueBG({ bg = bright.blue }),
		BrightBlueSpecial({ sp = bright.blue }),

		BrightCyan({ fg = bright.cyan }),
		BrightCyanBG({ bg = bright.cyan }),
		BrightCyanSpecial({ sp = bright.cyan }),

		BrightGreen({ fg = bright.green }),
		BrightGreenBG({ bg = bright.green }),
		BrightGreenSpecial({ sp = bright.green }),

		BrightGrey({ fg = bright.grey }),
		BrightGreyBG({ bg = bright.grey }),
		BrightGreySpecial({ sp = bright.grey }),

		BrightOrange({ fg = bright.orange }),
		BrightOrangeBG({ bg = bright.orange }),
		BrightOrangeSpecial({ sp = bright.orange }),

		BrightPurple({ fg = bright.purple }),
		BrightPurpleBG({ bg = bright.purple }),
		BrightPurpleSpecial({ sp = bright.purple }),

		BrightRed({ fg = bright.red }),
		BrightRedBG({ bg = bright.red }),
		BrightRedSpecial({ sp = bright.red }),

		BrightWhite({ fg = bright.white }),
		BrightWhiteBG({ bg = bright.white }),
		BrightWhiteSpecial({ sp = bright.white }),

		BrightYellow({ fg = bright.yellow }),
		BrightYellowBG({ bg = bright.yellow }),
		BrightYellowSpecial({ sp = bright.yellow }),

		DimBlack({ fg = dim.black }),
		DimBlackBG({ bg = dim.black }),
		DimBlackSpecial({ sp = dim.black }),

		DimBlue({ fg = dim.blue }),
		DimBlueBG({ bg = dim.blue }),
		DimBlueSpecial({ sp = dim.blue }),

		DimCyan({ fg = dim.cyan }),
		DimCyanBG({ bg = dim.cyan }),
		DimCyanSpecial({ sp = dim.cyan }),

		DimGreen({ fg = dim.green }),
		DimGreenBG({ bg = dim.green }),
		DimGreenSpecial({ sp = dim.green }),

		DimGrey({ fg = dim.grey }),
		DimGreyBG({ bg = dim.grey }),
		DimGreySpecial({ sp = dim.grey }),

		DimOrange({ fg = dim.orange }),
		DimOrangeBG({ bg = dim.orange }),
		DimOrangeSpecial({ sp = dim.orange }),

		DimPurple({ fg = dim.purple }),
		DimPurpleBG({ bg = dim.purple }),
		DimPurpleSpecial({ sp = dim.purple }),

		DimRed({ fg = dim.red }),
		DimRedBG({ bg = dim.red }),
		DimRedSpecial({ sp = dim.red }),

		DimWhite({ fg = dim.white }),
		DimWhiteBG({ bg = dim.white }),
		DimWhiteSpecial({ sp = dim.white }),

		DimYellow({ fg = dim.yellow }),
		DimYellowBG({ bg = dim.yellow }),
		DimYellowSpecial({ sp = dim.yellow }),

		Ignore({}),

		Error({ RedBG, BrightWhite, BoldItalic }),
		Todo({ BlueBG, BrightWhite, BoldItalic }),
		ErrorMsg({ BrightWhiteBG, Red, BoldItalicUndercurl, RedSpecial }),
		WarningMsg({ YellowBG, DimBlack, BoldItalicUndercurl, DimBlackSpecial }),
		Debug({ Orange, Bold }),
		Delimiter({ Green, Bold }),
		Special({ BrightPurple, Bold }),
		SpecialChar({ Purple, BoldItalicUnderline }),

		Conceal({ GreyBG, BrightGrey, NoCombine }),
		Cursor({ Reverse }),
		CuCursor({ Reverse }),
		Directory({ BrightBlue, Bold }),
		EndOfBuffer({ BrightGrey, NoCombine }),
		FoldColumn({ BrightGrey, NoCombine }),
		Folded({ DimPurple, BoldItalic }),
		PmenuThumb({ BrightYellowBB, Blue, NoCombine }),
		Question({ BrightOrange, NoCombine }),
		Search({ GreenBG, White, BoldItalic }),
		SpecialKey({ Purple, NoCombine }),
		Title({ Orange, NoCombine }),
		lCursor({ BoldReverse }),

		Boolean({ Yellow, NoCombine }),
		Character({ BrightGreen, NoCombine }),
		Conditional({ Orange, NoCombine }),
		Define({ Purple, NoCombine }),
		Exception({ Red, BoldUndercurl }),
		Number({ BrightRed, NoCombine }),
		Float({ DimRed }),
		Identifier({ BrightYellow, NoCombine }),
		Include({ Blue, NoCombine }),
		Keyword({ BrightBlue, NoCombine }),
		Label({ DimCyan, NoCombine }),
		Macro({ BrightPurple, NoCombine }),
		Operator({ BrightOrange, NoCombine }),
		PreProc({ Orange, NoCombine }),
		Repeat({ DimPurple, NoCombine }),
		Statement({ Green, NoCombine }),

		TSAnnotation({ Special }),
		TSBoolean({ Boolean }),
		TSCharacter({ Character }),
		TSConditional({ Conditional }),
		TSConstBuiltin({ Cyan, Bold }),
		TSConstMacro({ Blue, Bold }),
		TSEmphasis({ Italic }),
		TSError({ ErrorMsg }),
		TSException({ Exception }),
		TSFloat({ Float }),
		TSFuncBuiltin({ Special }),
		TSFuncMacro({ Macro }),
		TSInclude({ Include }),
		TSKeyword({ Keyword }),
		TSLabel({ Label }),
		TSNamespace({ Identifier }),
		TSNumber({ Number }),
		TSOperator({ Operator }),
		TSPunctDelimiter({ Delimiter }),
		TSPunctSpecial({ Special }),
		TSRepeat({ Repeat }),
		TSStringEscape({ DimOrange, NoCombine }),
		TSStringRegex({ Cyan, NoCombine }),
		TSStrong({ Bold }),
		TSTitle({ Title }),
		TSURI({ Underline, BrightBlueSpecial }),
		TSUnderline({ Underline }),
		TSVariable({ DimGreen, NoCombine }),
		TSVariableBuiltin({ Purple, Bold }),

		DiagnosticError({ Red, NoCombine }),
		DiagnosticHint({ BrightGreen, NoCombine }),
		DiagnosticInfo({ BrightBlue, NoCombine }),
		DiagnosticWarn({ Yellow, NoCombine }),
		DiagnosticFloatingError({ DimRed, NoCombine }),
		DiagnosticFloatingHint({ DimGreen, NoCombine }),
		DiagnosticFloatingInfo({ DimBlue, NoCombine }),
		DiagnosticFloatingWarn({ DimYellow, NoCombine }),
		DiagnosticSignError({ DiagnosticError, Bold }),
		DiagnosticSignHint({ DiagnosticHint, Bold }),
		DiagnosticSignInfo({ DiagnosticInfo, Bold }),
		DiagnosticSignWarn({ DiagnosticWarn, Bold }),
		DiagnosticUnderlineError({ Undercurl, RedSpecial }),
		DiagnosticUnderlineHint({ Undercurl, BrightGreenSpecial }),
		DiagnosticUnderlineInfo({ Undercurl, BrightBlueSpecial }),
		DiagnosticUnderlineWarn({ Undercurl, YellowSpecial }),
		LspReferenceRead({ BrightGrey, Italic }),
		LsLspReferenceRead({ BrightGrey, Italic }),
		LspLspReferenceRead({ BrightGrey, Italic }),
		NotifyDEBUGBorder({ Purple, NoCombine }),
		NotifyDEBUGIcon({ Purple, NoCombine }),
		NotifyDEBUGTitle({ Purple, Bold }),
		NotifyERRORBorder({ Red, NoCombine }),
		NotifyERRORIcon({ Red, NoCombine }),
		NotifyERRORTitle({ Red, Bold }),
		NotifyINFOBorder({ Blue, NoCombine }),
		NotifyINFOIcon({ Blue, NoCombine }),
		NotifyINFOTitle({ Blue, Bold }),
		NotifyTRACEBorder({ Green, NoCombine }),
		NotifyTRACEIcon({ Green, NoCombine }),
		NotifyTRACETitle({ Green, Bold }),
		NotifyWARNBorder({ Yellow, NoCombine }),
		NotifyWARNIcon({ Yellow, NoCombine }),
		NotifyWARNTitle({ Yellow, Bold }),
		ColorColumn({ DimBlack, NoCombine }),
		Comment({ BrightGrey, Italic }),
		CursorLine({ DimBlack, NoCombine }),
		CursorLineNr({ Black, Yellow, Bold }),
		DiffAdd({ DimGreen, Bold }),
		DiffChange({ DimBlue, Bold }),
		DiffDelete({ DimRed, Bold }),
		DiffText({ DimPurple, BoldUndercurl }),
		IncSearch({ BrightGreen, Black, Bold }),
		LineNr({ DimBlackBG, DimGrey, NoCombine }),
		MatchParen({ Purple, Yellow, NoCombine }),
		ModeMsg({ BrightGrey, NoCombine }),
		MoreMsg({ BrightPurple, Bold }),
		MsgArea({ BrightYellow, Italic }),
		MsgSeparator({ BrightGreen, NoCombine }),
		NonText({ Grey, NoCombine }),
		Normal({ Black, White, NoCombine }),
		NormalFloat({ DimBlack, NoCombine }),
		NormalNC({ BrightBlack, White, NoCombine }),
		Pmenu({ DimBlack, White, NoCombine }),
		PmenuSbar({ DimBlack, NoCombine }),
		PmenuSel({ Purple, Yellow, Bold }),
		QuickFixLine({ Purple, Yellow, NoCombine }),
		SignColumn({ Black, Italic }),
		SpellRare({ BrightBlue, Undercurl }),
		StatusLine({ Black, NoCombine }),
		StatusLineNC({ Black, NoCombine }),
		Substitute({ Blue, BrightCyan, NoCombine }),
		TabLine({ Grey, BrightGrey }),
		TabLineFill({ DimGreyBG, Black, NoCombine }),
		TabLineSel({ Normal, Bold }),
		TermCursorNC({ WhiteBG, Black, NoCombine }),
		VertSplit({ BrightPurple, NoCombine }),
		Visual({ DimPurpleBG, NoCombine }),
		VisualNOS({ BrightCyanBG, NoCombine }),
		Whitespace({ DimBlack, NoCombine }),
		WildMenu({ GreenBG, Bold }),

		Constant({ BrightCyan, Bold }),
		String({ BrightWhite, Italic }),
		Function({ Cyan, Bold }),
		PreCondit({ White, Bold }),
		SpecialComment({ DimGreen, Italic }),
		StorageClass({ BrightYellow, Bold }),
		Structure({ BrightCyan, Bold }),
		Tag({ BrightCyan, Underline }),
		Type({ Yellow, Bold }),
		Typedef({ BrightGreen, NoCombine }),

		TSPunctBracket({ Orange, NoCombine }),
		TSConstant({ Constant }),
		TSString({ String }),
		TSFunction({ Function }),
		TSParameter({ BrightPurple, Bold }),
		TSParameterReference({ TSParameter, Undercurl, PurpleSpecial }),
		TSMethod({ Function, BrightBlue }),
		TSField({ TSMethod, Blue }),
		TSProperty({ TSField }),
		TSConstructor({ TSMethod, Underline, BlueSpecial }),
		TSKeywordFunction({ Function }),
		TSType({ Type }),
		TSTypeBuiltin({ Typedef }),
		TSText({ String }),
		TSLiteral({ String }),

		DiagnosticVirtualTextError({ DimBlackBG, DimRed, Italic }),
		DiagnosticVirtualTextHint({ DimBlackBG, DimGreen, Italic }),
		DiagnosticVirtualTextInfo({ DimBlackBG, DimBlue, Italic }),
		DiagnosticVirtualTextWarn({ DimBlackBG, DimYellow, Italic }),

		GitSignsAddSign({ SignColumn, BrightGreen, NoCombine }),
		GitSignsChangeSign({ SignColumn, BrightBlue, NoCombine }),
		GitSignsDeleteSign({ SignColumn, DimRed, NoCombine }),
		GitSignsAddNr({ DimBlackBG, BrightGreen, NoCombine }),
		GitSignsChangeNr({ DimBlackBG, BrightBlue, NoCombine }),
		GitSignsDeleteNr({ DimBlackBG, DimRed, NoCombine }),

		CmpItemAbbr({ White, NoCombine }),
		CmpItemAbbrDeprecated({ BrightYellow, Stirkethrough }),
		CmpItemAbbrMatch({ Orange, Bold }),
		CmpItemAbbrMatchFuzzy({ BrightOrange, Bold }),
		CmpItemKind({ BrightBlue }),
		CmpItemMenu({ Comment }),

		NotifyDEBUGBody({ Normal }),
		NotifyERRORBody({ Normal }),
		NotifyINFOBody({ Normal }),
		NotifyTRACEBody({ Normal }),
		NotifyWARNBody({ Normal }),

		NeogitDiffAddHighlight({ DiffAdd }),
		NeogitDiffDeleteHighlight({ DiffDelete }),
		NeogitDiffContextHighlight({ DiffChange }),
		NeogitHunkHeader({ BrightPurple, DimYellowBG, NoCombine }),
		NeogitHunkHeaderHighlight({ NeogitHunkHeader, BoldUnderline }),
	}
end)

return theme
